import snowflake.connector

# Setting up snowflake connection
conn = snowflake.connector.connect(
    user='BLUEJAY',
    password='Tanhongkai123!',
    account='sfedu02-bab83824',
    warehouse='GROUP1_ADO_WAREHOUSE',
    database='ADO_GROUP1_DB_RAW',
    schema='CONTOSO'
)

# Creating a cursor object
cursor = conn.cursor()

# Clearing previous load
cursor.execute("""
TRUNCATE TABLE LOADACCOUNT_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADCHANNEL_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADCURRENCY_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADCUSTOMER_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADDATE_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADEMPLOYEE_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADENTITY_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADEXCHANGERATE_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADGEOGRAPHY_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADINVENTORY_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADITMACHINE_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADITSLA_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADMACHINE_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADONLINESALES_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADOUTAGE_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADPRODUCTCATEGORY_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADPRODUCTSUBCATEGORY_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADPRODUCT_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADPROMOTION_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADSALESQUOTA_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADSALESTERRITORY_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADSALES_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADSCENARIO_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADSTORE_STAGE
""") 

cursor.execute("""
TRUNCATE TABLE LOADSTRATEGYPLAN_STAGE
""")

#cursor.execute("""
#CREATE OR REPLACE STORAGE INTEGRATION contoso_int
#  TYPE = EXTERNAL_STAGE
#  STORAGE_PROVIDER = 'S3'
#  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::590183919776:role/contoso'
#  ENABLED = TRUE
#  STORAGE_ALLOWED_LOCATIONS = ('s3://contoso-blah/');
#""")

## Creating a file format for the load

#cursor.execute("""
#CREATE OR REPLACE FILE FORMAT CSV_LOAD_FORMAT
#    TYPE = 'CSV'
#    COMPRESSION = 'AUTO'
#    FIELD_DELIMITER = ','
#    RECORD_DELIMITER = '\\n'
#    SKIP_HEADER = 1
#    FIELD_OPTIONALLY_ENCLOSED_BY = '\\042'
#    TRIM_SPACE = FALSE
#    ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE
#    ESCAPE = 'NONE'
#    ESCAPE_UNENCLOSED_FIELD = '\\134'
#    DATE_FORMAT = 'AUTO'
#    TIMESTAMP_FORMAT = 'AUTO';
#""")

## Creating stages for the storage integration
#cursor.execute("""
#CREATE OR REPLACE STAGE STG_ACCOUNT_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/ACCOUNT/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_CHANNEL_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/CHANNEL/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_CURRENCY_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/CURRENCY/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_CUSTOMER_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/CUSTOMER/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_DATE_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/DATE/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_EMPLOYEE_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/EMPLOYEE/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_ENTITY_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/ENTITY/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_GEOGRAPHY_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/GEOGRAPHY/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_MACHINE_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/MACHINE/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_OUTAGE_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/OUTAGE/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_PRODUCTCATEGORY_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/PRODUCTCATEGORY/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_PRODUCTSUBCATEGORY_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/PRODUCTSUBCATEGORY/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_PRODUCT_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/PRODUCT/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_PROMOTION_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/PROMOTION/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_SALESTERRITORY_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/SALESTERRITORY/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_SCENARIO_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/SCENARIO/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_STORE_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/STORE/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_EXCHANGERATE_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/EXCHANGERATE/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_INVENTORY_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/INVENTORY/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_ITMACHINE_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/ITMACHINE/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_ITSLA_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/ITSLA/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_ONLINESALES_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/ONLINESALES/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_SALESQUOTA_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/SALESQUOTA/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_SALES_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/SALES/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

#cursor.execute("""
#CREATE OR REPLACE STAGE STG_STRATEGYPLAN_DEV
#STORAGE_INTEGRATION = CONTOSO_INT
#URL = 's3://contoso-blah/STRATEGYPLAN/'
#FILE_FORMAT = CSV_LOAD_FORMAT;
#""")

## Create stages for the table load

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADACCOUNT_STAGE (
# 	ACCOUNTKEY NUMBER(38,0),
# 	PARENTACCOUNTKEY VARCHAR(16777216),
# 	ACCOUNTLABEL NUMBER(38,0),
# 	ACCOUNTNAME VARCHAR(16777216),
# 	ACCOUNTDESCRIPTION VARCHAR(16777216),
# 	ACCOUNTTYPE VARCHAR(16777216),
# 	OPERATOR VARCHAR(16777216),
# 	CUSTOMMEMBERS VARCHAR(16777216),
# 	VALUETYPE VARCHAR(16777216),
# 	CUSTOMMEMBEROPTIONS VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADCHANNEL_STAGE (
# 	CHANNELKEY NUMBER(38,0),
# 	CHANNELLABEL NUMBER(38,0),
# 	CHANNELNAME VARCHAR(16777216),
# 	CHANNELDESCRIPTION VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADCURRENCY_STAGE (
# 	CURRENCYKEY NUMBER(38,0),
# 	CURRENCYLABEL NUMBER(38,0),
# 	CURRENCYNAME VARCHAR(16777216),
# 	CURRENCYDESCRIPTION VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADCUSTOMER_STAGE (
# 	CUSTOMERKEY NUMBER(38,0),
# 	GEOGRAPHYKEY NUMBER(38,0),
# 	CUSTOMERLABEL VARCHAR(16777216),
# 	TITLE VARCHAR(16777216),
# 	FIRSTNAME VARCHAR(16777216),
# 	MIDDLENAME VARCHAR(16777216),
# 	LASTNAME VARCHAR(16777216),
# 	NAMESTYLE VARCHAR(16777216),
# 	BIRTHDATE VARCHAR(16777216),
# 	MARITALSTATUS VARCHAR(16777216),
# 	SUFFIX VARCHAR(16777216),
# 	GENDER VARCHAR(16777216),
# 	EMAILADDRESS VARCHAR(16777216),
# 	YEARLYINCOME NUMBER(38,0),
# 	TOTALCHILDREN VARCHAR(16777216),
# 	NUMBERCHILDRENATHOME VARCHAR(16777216),
# 	EDUCATION VARCHAR(16777216),
# 	OCCUPATION VARCHAR(16777216),
# 	HOUSEOWNERFLAG VARCHAR(16777216),
# 	NUMBERCARSOWNED VARCHAR(16777216),
# 	ADDRESSLINE1 VARCHAR(16777216),
# 	ADDRESSLINE2 VARCHAR(16777216),
# 	PHONE VARCHAR(16777216),
# 	DATEFIRSTPURCHASE VARCHAR(16777216),
# 	CUSTOMERTYPE VARCHAR(16777216),
# 	COMPANYNAME VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADDATE_STAGE (
# 	DATEKEY DATE,
# 	FULLDATELABEL DATE,
# 	DATEDESCRIPTION VARCHAR(16777216),
# 	CALENDARYEAR NUMBER(38,0),
# 	CALENDARYEARLABEL VARCHAR(16777216),
# 	CALENDARHALFYEAR NUMBER(38,0),
# 	CALENDARHALFYEARLABEL VARCHAR(16777216),
# 	CALENDARQUARTER NUMBER(38,0),
# 	CALENDARQUARTERLABEL VARCHAR(16777216),
# 	CALENDARMONTH NUMBER(38,0),
# 	CALENDARMONTHLABEL VARCHAR(16777216),
# 	CALENDARWEEK NUMBER(38,0),
# 	CALENDARWEEKLABEL VARCHAR(16777216),
# 	CALENDARDAYOFWEEK NUMBER(38,0),
# 	CALENDARDAYOFWEEKLABEL VARCHAR(16777216),
# 	FISCALYEAR NUMBER(38,0),
# 	FISCALYEARLABEL VARCHAR(16777216),
# 	FISCALHALFYEAR NUMBER(38,0),
# 	FISCALHALFYEARLABEL VARCHAR(16777216),
# 	FISCALQUARTER NUMBER(38,0),
# 	FISCALQUARTERLABEL VARCHAR(16777216),
# 	FISCALMONTH NUMBER(38,0),
# 	FISCALMONTHLABEL VARCHAR(16777216),
# 	ISWORKDAY VARCHAR(16777216),
# 	ISHOLIDAY NUMBER(38,0),
# 	HOLIDAYNAME VARCHAR(16777216),
# 	EUROPESEASON VARCHAR(16777216),
# 	NORTHAMERICASEASON VARCHAR(16777216),
# 	ASIASEASON VARCHAR(16777216)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADEMPLOYEE_STAGE (
# 	EMPLOYEEKEY NUMBER(38,0),
# 	PARENTEMPLOYEEKEY VARCHAR(16777216),
# 	FIRSTNAME VARCHAR(16777216),
# 	LASTNAME VARCHAR(16777216),
# 	MIDDLENAME VARCHAR(16777216),
# 	TITLE VARCHAR(16777216),
# 	HIREDATE DATE,
# 	BIRTHDATE DATE,
# 	EMAILADDRESS VARCHAR(16777216),
# 	PHONE VARCHAR(16777216),
# 	MARITALSTATUS VARCHAR(16777216),
# 	EMERGENCYCONTACTNAME VARCHAR(16777216),
# 	EMERGENCYCONTACTPHONE VARCHAR(16777216),
# 	SALARIEDFLAG NUMBER(38,0),
# 	GENDER VARCHAR(16777216),
# 	PAYFREQUENCY NUMBER(38,0),
# 	BASERATE NUMBER(38,2),
# 	VACATIONHOURS NUMBER(38,0),
# 	CURRENTFLAG NUMBER(38,0),
# 	SALESPERSONFLAG NUMBER(38,0),
# 	DEPARTMENTNAME VARCHAR(16777216),
# 	STARTDATE DATE,
# 	ENDDATE VARCHAR(16777216),
# 	STATUS VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADENTITY_STAGE (
# 	ENTITYKEY NUMBER(38,0),
# 	ENTITYLABEL NUMBER(38,0),
# 	PARENTENTITYKEY VARCHAR(16777216),
# 	PARENTENTITYLABEL VARCHAR(16777216),
# 	ENTITYNAME VARCHAR(16777216),
# 	ENTITYDESCRIPTION VARCHAR(16777216),
# 	ENTITYTYPE VARCHAR(16777216),
# 	STARTDATE DATE,
# 	ENDDATE VARCHAR(16777216),
# 	STATUS VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADGEOGRAPHY_STAGE (
# 	GEOGRAPHYKEY NUMBER(38,0),
# 	GEOGRAPHYTYPE VARCHAR(16777216),
# 	CONTINENTNAME VARCHAR(16777216),
# 	CITYNAME VARCHAR(16777216),
# 	STATEPROVINCENAME VARCHAR(16777216),
# 	REGIONCOUNTRYNAME VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADMACHINE_STAGE (
# 	MACHINEKEY NUMBER(38,0),
# 	MACHINELABEL VARCHAR(16777216),
# 	STOREKEY NUMBER(38,0),
# 	MACHINETYPE VARCHAR(16777216),
# 	MACHINENAME VARCHAR(16777216),
# 	MACHINEDESCRIPTION VARCHAR(16777216),
# 	VENDORNAME VARCHAR(16777216),
# 	MACHINEOS VARCHAR(16777216),
# 	MACHINESOURCE VARCHAR(16777216),
# 	MACHINEHARDWARE VARCHAR(16777216),
# 	MACHINESOFTWARE VARCHAR(16777216),
# 	STATUS VARCHAR(16777216),
# 	SERVICESTARTDATE DATE,
# 	DECOMMISSIONDATE DATE,
# 	LASTMODIFIEDDATE DATE,
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADOUTAGE_STAGE (
# 	OUTAGEKEY NUMBER(38,0),
# 	OUTAGELABEL NUMBER(38,0),
# 	OUTAGENAME VARCHAR(16777216),
# 	OUTAGEDESCRIPTION VARCHAR(16777216),
# 	OUTAGETYPE VARCHAR(16777216),
# 	OUTAGETYPEDESCRIPTION VARCHAR(16777216),
# 	OUTAGESUBTYPE VARCHAR(16777216),
# 	OUTAGESUBTYPEDESCRIPTION VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADPRODUCTCATEGORY_STAGE (
# 	PRODUCTCATEGORYKEY NUMBER(38,0),
# 	PRODUCTCATEGORYLABEL NUMBER(38,0),
# 	PRODUCTCATEGORYNAME VARCHAR(16777216),
# 	PRODUCTCATEGORYDESCRIPTION VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADPRODUCTSUBCATEGORY_STAGE (
# 	PRODUCTSUBCATEGORYKEY NUMBER(38,0),
# 	PRODUCTSUBCATEGORYLABEL NUMBER(38,0),
# 	PRODUCTSUBCATEGORYNAME VARCHAR(16777216),
# 	PRODUCTSUBCATEGORYDESCRIPTION VARCHAR(16777216),
# 	PRODUCTCATEGORYKEY NUMBER(38,0),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADPRODUCT_STAGE (
# 	PRODUCTKEY NUMBER(38,0),
# 	PRODUCTLABEL NUMBER(38,0),
# 	PRODUCTNAME VARCHAR(16777216),
# 	PRODUCTDESCRIPTION VARCHAR(16777216),
# 	PRODUCTSUBCATEGORYKEY NUMBER(38,0),
# 	MANUFACTURER VARCHAR(16777216),
# 	BRANDNAME VARCHAR(16777216),
# 	CLASSID NUMBER(38,0),
# 	CLASSNAME VARCHAR(16777216),
# 	STYLEID VARCHAR(16777216),
# 	STYLENAME VARCHAR(16777216),
# 	COLORID NUMBER(38,0),
# 	COLORNAME VARCHAR(16777216),
# 	SIZE VARCHAR(16777216),
# 	SIZERANGE VARCHAR(16777216),
# 	SIZEUNITMEASUREID VARCHAR(16777216),
# 	WEIGHT VARCHAR(16777216),
# 	WEIGHTUNITMEASUREID VARCHAR(16777216),
# 	UNITOFMEASUREID NUMBER(38,0),
# 	UNITOFMEASURENAME VARCHAR(16777216),
# 	STOCKTYPEID NUMBER(38,0),
# 	STOCKTYPENAME VARCHAR(16777216),
# 	UNITCOST NUMBER(38,2),
# 	UNITPRICE NUMBER(38,3),
# 	AVAILABLEFORSALEDATE VARCHAR(16777216),
# 	STOPSALEDATE VARCHAR(16777216),
# 	STATUS VARCHAR(16777216),
# 	IMAGEURL VARCHAR(16777216),
# 	PRODUCTURL VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADPROMOTION_STAGE (
# 	PROMOTIONKEY NUMBER(38,0),
# 	PROMOTIONLABEL NUMBER(38,0),
# 	PROMOTIONNAME VARCHAR(16777216),
# 	PROMOTIONDESCRIPTION VARCHAR(16777216),
# 	DISCOUNTPERCENT NUMBER(38,2),
# 	PROMOTIONTYPE VARCHAR(16777216),
# 	PROMOTIONCATEGORY VARCHAR(16777216),
# 	STARTDATE DATE,
# 	ENDDATE DATE,
# 	MINQUANTITY VARCHAR(16777216),
# 	MAXQUANTITY VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADSALESTERRITORY_STAGE (
# 	SALESTERRITORYKEY NUMBER(38,0),
# 	GEOGRAPHYKEY NUMBER(38,0),
# 	SALESTERRITORYLABEL NUMBER(38,0),
# 	SALESTERRITORYNAME VARCHAR(16777216),
# 	SALESTERRITORYREGION VARCHAR(16777216),
# 	SALESTERRITORYCOUNTRY VARCHAR(16777216),
# 	SALESTERRITORYGROUP VARCHAR(16777216),
# 	SALESTERRITORYLEVEL NUMBER(38,0),
# 	SALESTERRITORYMANAGER NUMBER(38,0),
# 	STARTDATE DATE,
# 	ENDDATE VARCHAR(16777216),
# 	STATUS VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADSCENARIO_STAGE (
# 	SCENARIOKEY NUMBER(38,0),
# 	SCENARIOLABEL NUMBER(38,0),
# 	SCENARIONAME VARCHAR(16777216),
# 	SCENARIODESCRIPTION VARCHAR(16777216),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADSTORE_STAGE (
# 	STOREKEY NUMBER(38,0),
# 	GEOGRAPHYKEY NUMBER(38,0),
# 	STOREMANAGER NUMBER(38,0),
# 	STORETYPE VARCHAR(16777216),
# 	STORENAME VARCHAR(16777216),
# 	STOREDESCRIPTION VARCHAR(16777216),
# 	STATUS BOOLEAN,
# 	OPENDATE DATE,
# 	CLOSEDATE VARCHAR(16777216),
# 	ENTITYKEY NUMBER(38,0),
# 	ZIPCODE VARCHAR(16777216),
# 	ZIPCODEEXTENSION VARCHAR(16777216),
# 	STOREPHONE VARCHAR(16777216),
# 	STOREFAX VARCHAR(16777216),
# 	ADDRESSLINE1 VARCHAR(16777216),
# 	ADDRESSLINE2 VARCHAR(16777216),
# 	CLOSEREASON VARCHAR(16777216),
# 	EMPLOYEECOUNT VARCHAR(16777216),
# 	SELLINGAREASIZE NUMBER(38,0),
# 	LASTREMODELDATE DATE,
# 	GEOLOCATION FLOAT,
# 	GEOMETRY FLOAT,
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADEXCHANGERATE_STAGE (
# 	EXCHANGERATEKEY NUMBER(38,0),
# 	CURRENCYKEY NUMBER(38,0),
# 	DATEKEY DATE,
# 	AVERAGERATE NUMBER(38,5),
# 	ENDOFDAYRATE NUMBER(38,6),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADINVENTORY_STAGE (
# 	INVENTORYKEY NUMBER(38,0),
# 	DATEKEY DATE,
# 	STOREKEY NUMBER(38,0),
# 	PRODUCTKEY NUMBER(38,0),
# 	CURRENCYKEY NUMBER(38,0),
# 	ONHANDQUANTITY NUMBER(38,0),
# 	ONORDERQUANTITY NUMBER(38,0),
# 	SAFETYSTOCKQUANTITY NUMBER(38,0),
# 	UNITCOST NUMBER(38,2),
# 	DAYSINSTOCK NUMBER(38,0),
# 	MINDAYINSTOCK NUMBER(38,0),
# 	MAXDAYINSTOCK NUMBER(38,0),
# 	AGING NUMBER(38,0)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADITMACHINE_STAGE (
#     ITMACHINEKEY NUMBER(38,0),
#     MACHINEKEY NUMBER(38,0),
#     DATEKEY DATE,
#     COSTAMOUNT NUMBER(38,0),
#     COSTTYPE VARCHAR(16777216),
#     ETLLOADID NUMBER(38,0),
#     LOADDATE TIMESTAMP_NTZ(9),
#     UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADITSLA_STAGE (
# 	ITSLAKEY NUMBER(38,0),
# 	DATEKEY DATE,
# 	STOREKEY NUMBER(38,0),
# 	MACHINEKEY NUMBER(38,0),
# 	OUTAGEKEY NUMBER(38,0),
# 	OUTAGESTARTTIME TIMESTAMP_NTZ(9),
# 	OUTAGEENDTIME TIMESTAMP_NTZ(9),
# 	DOWNTIME NUMBER(38,0),
# 	ETLLOADID NUMBER(38,0),
# 	LOADDATE TIMESTAMP_NTZ(9),
# 	UPDATEDATE TIMESTAMP_NTZ(9)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADONLINESALES_STAGE (
# 	ONLINESALESKEY NUMBER(38,0),
# 	DATEKEY DATE,
# 	STOREKEY NUMBER(38,0),
# 	PRODUCTKEY NUMBER(38,0),
# 	PROMOTIONKEY NUMBER(38,0),
# 	CURRENCYKEY NUMBER(38,0),
# 	CUSTOMERKEY NUMBER(38,0),
# 	SALESORDERNUMBER VARCHAR(16777216),
# 	SALESORDERLINENUMBER NUMBER(38,0),
# 	SALESQUANTITY NUMBER(38,0),
# 	SALESAMOUNT NUMBER(38,4),
# 	RETURNQUANTITY NUMBER(38,0),
# 	RETURNAMOUNT NUMBER(38,4),
# 	DISCOUNTQUANTITY NUMBER(38,0),
# 	DISCOUNTAMOUNT NUMBER(38,4),
# 	TOTALCOST NUMBER(38,2),
# 	UNITCOST NUMBER(38,2),
# 	UNITPRICE NUMBER(38,2)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADSALESQUOTA_STAGE (
# 	SALESQUOTAKEY NUMBER(38,0),
# 	CHANNELKEY NUMBER(38,0),
# 	STOREKEY NUMBER(38,0),
# 	PRODUCTKEY NUMBER(38,0),
# 	DATEKEY DATE,
# 	CURRENCYKEY NUMBER(38,0),
# 	SCENARIOKEY NUMBER(38,0),
# 	SALESQUANTITYQUOTA NUMBER(38,1),
# 	SALESAMOUNTQUOTA NUMBER(38,4),
# 	GROSSMARGINQUOTA NUMBER(38,4)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADSALES_STAGE (
# 	SALESKEY NUMBER(38,0),
# 	DATEKEY DATE,
# 	CHANNELKEY NUMBER(38,0),
# 	STOREKEY NUMBER(38,0),
# 	PRODUCTKEY NUMBER(38,0),
# 	PROMOTIONKEY NUMBER(38,0),
# 	CURRENCYKEY NUMBER(38,0),
# 	UNITCOST NUMBER(38,2),
# 	UNITPRICE NUMBER(38,3),
# 	SALESQUANTITY NUMBER(38,0),
# 	RETURNQUANTITY NUMBER(38,0),
# 	RETURNAMOUNT NUMBER(38,2),
# 	DISCOUNTQUANTITY NUMBER(38,0),
# 	DISCOUNTAMOUNT NUMBER(38,4),
# 	TOTALCOST NUMBER(38,2),
# 	SALESAMOUNT NUMBER(38,4)
# );
# """)

# cursor.execute("""
# CREATE OR REPLACE TABLE LOADSTRATEGYPLAN_STAGE (
# 	STRATEGYPLANKEY NUMBER(38,0),
# 	DATEKEY DATE,
# 	ENTITYKEY NUMBER(38,0),
# 	SCENARIOKEY NUMBER(38,0),
# 	ACCOUNTKEY NUMBER(38,0),
# 	CURRENCYKEY NUMBER(38,0),
# 	PRODUCTCATEGORYKEY NUMBER(38,0),
# 	AMOUNT NUMBER(38,4)
# );
# """)

# File Name
file_name = "initial_migration.csv"

#Account
file_path = f"@STG_ACCOUNT_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADACCOUNT_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMACCOUNT_RAW (
    ACCOUNTKEY,
    PARENTACCOUNTKEY,
    ACCOUNTLABEL,
    ACCOUNTNAME,
    ACCOUNTDESCRIPTION,
    ACCOUNTTYPE,
    OPERATOR,
    CUSTOMMEMBERS,
    VALUETYPE,
    CUSTOMMEMBEROPTIONS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    ACCOUNTKEY,
    PARENTACCOUNTKEY,
    ACCOUNTLABEL,
    ACCOUNTNAME,
    ACCOUNTDESCRIPTION,
    ACCOUNTTYPE,
    OPERATOR,
    CUSTOMMEMBERS,
    VALUETYPE,
    CUSTOMMEMBEROPTIONS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADACCOUNT_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")

#Channel
file_path = f"@STG_CHANNEL_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADCHANNEL_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMCHANNEL_RAW (
    CHANNELKEY,
    CHANNELLABEL,
    CHANNELNAME,
    CHANNELDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    CHANNELKEY,
    CHANNELLABEL,
    CHANNELNAME,
    CHANNELDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADCHANNEL_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Currency
file_path = f"@STG_CURRENCY_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADCURRENCY_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMCURRENCY_RAW (
    CURRENCYKEY,
    CURRENCYLABEL,
    CURRENCYNAME,
    CURRENCYDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    CURRENCYKEY,
    CURRENCYLABEL,
    CURRENCYNAME,
    CURRENCYDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADCURRENCY_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Customer
file_path = f"@STG_CUSTOMER_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADCUSTOMER_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMCUSTOMER_RAW (
    CUSTOMERKEY,
    GEOGRAPHYKEY,
    CUSTOMERLABEL,
    TITLE,
    FIRSTNAME,
    MIDDLENAME,
    LASTNAME,
    NAMESTYLE,
    BIRTHDATE,
    MARITALSTATUS,
    SUFFIX,
    GENDER,
    EMAILADDRESS,
    YEARLYINCOME,
    TOTALCHILDREN,
    NUMBERCHILDRENATHOME,
    EDUCATION,
    OCCUPATION,
    HOUSEOWNERFLAG,
    NUMBERCARSOWNED,
    ADDRESSLINE1,
    ADDRESSLINE2,
    PHONE,
    DATEFIRSTPURCHASE,
    CUSTOMERTYPE,
    COMPANYNAME,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    CUSTOMERKEY,
    GEOGRAPHYKEY,
    CUSTOMERLABEL,
    TITLE,
    FIRSTNAME,
    MIDDLENAME,
    LASTNAME,
    NAMESTYLE,
    BIRTHDATE,
    MARITALSTATUS,
    SUFFIX,
    GENDER,
    EMAILADDRESS,
    YEARLYINCOME,
    TOTALCHILDREN,
    NUMBERCHILDRENATHOME,
    EDUCATION,
    OCCUPATION,
    HOUSEOWNERFLAG,
    NUMBERCARSOWNED,
    ADDRESSLINE1,
    ADDRESSLINE2,
    PHONE,
    DATEFIRSTPURCHASE,
    CUSTOMERTYPE,
    COMPANYNAME,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADCUSTOMER_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")

#Date
file_path = f"@STG_DATE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADDATE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMDATE_RAW (
    DATEKEY,
    FULLDATELABEL,
    DATEDESCRIPTION,
    CALENDARYEAR,
    CALENDARYEARLABEL,
    CALENDARHALFYEAR,
    CALENDARHALFYEARLABEL,
    CALENDARQUARTER,
    CALENDARQUARTERLABEL,
    CALENDARMONTH,
    CALENDARMONTHLABEL,
    CALENDARWEEK,
    CALENDARWEEKLABEL,
    CALENDARDAYOFWEEK,
    CALENDARDAYOFWEEKLABEL,
    FISCALYEAR,
    FISCALYEARLABEL,
    FISCALHALFYEAR,
    FISCALHALFYEARLABEL,
    FISCALQUARTER,
    FISCALQUARTERLABEL,
    FISCALMONTH,
    FISCALMONTHLABEL,
    ISWORKDAY,
    ISHOLIDAY,
    HOLIDAYNAME,
    EUROPESEASON,
    NORTHAMERICASEASON,
    ASIASEASON
)
SELECT 
    DATEKEY,
    FULLDATELABEL,
    DATEDESCRIPTION,
    CALENDARYEAR,
    CALENDARYEARLABEL,
    CALENDARHALFYEAR,
    CALENDARHALFYEARLABEL,
    CALENDARQUARTER,
    CALENDARQUARTERLABEL,
    CALENDARMONTH,
    CALENDARMONTHLABEL,
    CALENDARWEEK,
    CALENDARWEEKLABEL,
    CALENDARDAYOFWEEK,
    CALENDARDAYOFWEEKLABEL,
    FISCALYEAR,
    FISCALYEARLABEL,
    FISCALHALFYEAR,
    FISCALHALFYEARLABEL,
    FISCALQUARTER,
    FISCALQUARTERLABEL,
    FISCALMONTH,
    FISCALMONTHLABEL,
    ISWORKDAY,
    ISHOLIDAY,
    HOLIDAYNAME,
    EUROPESEASON,
    NORTHAMERICASEASON,
    ASIASEASON
FROM LOADDATE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Employee
file_path = f"@STG_EMPLOYEE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADEMPLOYEE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMEMPLOYEE_RAW (
    EMPLOYEEKEY,
    PARENTEMPLOYEEKEY,
    FIRSTNAME,
    LASTNAME,
    MIDDLENAME,
    TITLE,
    HIREDATE,
    BIRTHDATE,
    EMAILADDRESS,
    PHONE,
    MARITALSTATUS,
    EMERGENCYCONTACTNAME,
    EMERGENCYCONTACTPHONE,
    SALARIEDFLAG,
    GENDER,
    PAYFREQUENCY,
    BASERATE,
    VACATIONHOURS,
    CURRENTFLAG,
    SALESPERSONFLAG,
    DEPARTMENTNAME,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    EMPLOYEEKEY,
    PARENTEMPLOYEEKEY,
    FIRSTNAME,
    LASTNAME,
    MIDDLENAME,
    TITLE,
    HIREDATE,
    BIRTHDATE,
    EMAILADDRESS,
    PHONE,
    MARITALSTATUS,
    EMERGENCYCONTACTNAME,
    EMERGENCYCONTACTPHONE,
    SALARIEDFLAG,
    GENDER,
    PAYFREQUENCY,
    BASERATE,
    VACATIONHOURS,
    CURRENTFLAG,
    SALESPERSONFLAG,
    DEPARTMENTNAME,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADEMPLOYEE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")

#Employee
file_path = f"@STG_EMPLOYEE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADEMPLOYEE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMEMPLOYEE_RAW (
    EMPLOYEEKEY,
    PARENTEMPLOYEEKEY,
    FIRSTNAME,
    LASTNAME,
    MIDDLENAME,
    TITLE,
    HIREDATE,
    BIRTHDATE,
    EMAILADDRESS,
    PHONE,
    MARITALSTATUS,
    EMERGENCYCONTACTNAME,
    EMERGENCYCONTACTPHONE,
    SALARIEDFLAG,
    GENDER,
    PAYFREQUENCY,
    BASERATE,
    VACATIONHOURS,
    CURRENTFLAG,
    SALESPERSONFLAG,
    DEPARTMENTNAME,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    EMPLOYEEKEY,
    PARENTEMPLOYEEKEY,
    FIRSTNAME,
    LASTNAME,
    MIDDLENAME,
    TITLE,
    HIREDATE,
    BIRTHDATE,
    EMAILADDRESS,
    PHONE,
    MARITALSTATUS,
    EMERGENCYCONTACTNAME,
    EMERGENCYCONTACTPHONE,
    SALARIEDFLAG,
    GENDER,
    PAYFREQUENCY,
    BASERATE,
    VACATIONHOURS,
    CURRENTFLAG,
    SALESPERSONFLAG,
    DEPARTMENTNAME,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADEMPLOYEE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Entity
file_path = f"@STG_ENTITY_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADENTITY_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMENTITY_RAW (
    ENTITYKEY,
    ENTITYLABEL,
    PARENTENTITYKEY,
    PARENTENTITYLABEL,
    ENTITYNAME,
    ENTITYDESCRIPTION,
    ENTITYTYPE,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    ENTITYKEY,
    ENTITYLABEL,
    PARENTENTITYKEY,
    PARENTENTITYLABEL,
    ENTITYNAME,
    ENTITYDESCRIPTION,
    ENTITYTYPE,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADENTITY_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#ExchangeRate
file_path = f"@STG_EXCHANGERATE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADEXCHANGERATE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTEXCHANGERATE_RAW (
    EXCHANGERATEKEY,
    CURRENCYKEY,
    DATEKEY,
    AVERAGERATE,
    ENDOFDAYRATE,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    EXCHANGERATEKEY,
    CURRENCYKEY,
    DATEKEY,
    AVERAGERATE,
    ENDOFDAYRATE,
    LOADDATE,
    UPDATEDATE
FROM LOADEXCHANGERATE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Geography
file_path = f"@STG_GEOGRAPHY_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADGEOGRAPHY_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMGEOGRAPHY_RAW (
    GEOGRAPHYKEY,
    GEOGRAPHYTYPE,
    CONTINENTNAME,
    CITYNAME,
    STATEPROVINCENAME,
    REGIONCOUNTRYNAME,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    GEOGRAPHYKEY,
    GEOGRAPHYTYPE,
    CONTINENTNAME,
    CITYNAME,
    STATEPROVINCENAME,
    REGIONCOUNTRYNAME,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADGEOGRAPHY_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Inventory
file_path = f"@STG_INVENTORY_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADINVENTORY_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTINVENTORY_RAW (
    INVENTORYKEY,
    DATEKEY,
    STOREKEY,
    PRODUCTKEY,
    CURRENCYKEY,
    ONHANDQUANTITY,
    ONORDERQUANTITY,
    SAFETYSTOCKQUANTITY,
    UNITCOST,
    DAYSINSTOCK,
    MINDAYINSTOCK,
    MAXDAYINSTOCK,
    AGING
)
SELECT 
    INVENTORYKEY,
    DATEKEY,
    STOREKEY,
    PRODUCTKEY,
    CURRENCYKEY,
    ONHANDQUANTITY,
    ONORDERQUANTITY,
    SAFETYSTOCKQUANTITY,
    UNITCOST,
    DAYSINSTOCK,
    MINDAYINSTOCK,
    MAXDAYINSTOCK,
    AGING
FROM LOADINVENTORY_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#ITMachine
file_path = f"@STG_ITMACHINE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADITMACHINE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTITMACHINE_RAW (
    ITMACHINEKEY,
    MACHINEKEY,
    DATEKEY,
    COSTAMOUNT,
    COSTTYPE,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    ITMACHINEKEY,
    MACHINEKEY,
    DATEKEY,
    COSTAMOUNT,
    COSTTYPE,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADITMACHINE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")

#ITSLA
file_path = f"@STG_ITSLA_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADITSLA_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTITSLA_RAW (
    ITSLAKEY,
    DATEKEY,
    STOREKEY,
    MACHINEKEY,
    OUTAGEKEY,
    OUTAGESTARTTIME,
    OUTAGEENDTIME,
    DOWNTIME,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    ITSLAKEY,
    DATEKEY,
    STOREKEY,
    MACHINEKEY,
    OUTAGEKEY,
    OUTAGESTARTTIME,
    OUTAGEENDTIME,
    DOWNTIME,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADITSLA_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Machine
file_path = f"@STG_MACHINE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADMACHINE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMMACHINE_RAW (
    MACHINEKEY,
    MACHINELABEL,
    STOREKEY,
    MACHINETYPE,
    MACHINENAME,
    MACHINEDESCRIPTION,
    VENDORNAME,
    MACHINEOS,
    MACHINESOURCE,
    MACHINEHARDWARE,
    MACHINESOFTWARE,
    STATUS,
    SERVICESTARTDATE,
    DECOMMISSIONDATE,
    LASTMODIFIEDDATE,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    MACHINEKEY,
    MACHINELABEL,
    STOREKEY,
    MACHINETYPE,
    MACHINENAME,
    MACHINEDESCRIPTION,
    VENDORNAME,
    MACHINEOS,
    MACHINESOURCE,
    MACHINEHARDWARE,
    MACHINESOFTWARE,
    STATUS,
    SERVICESTARTDATE,
    DECOMMISSIONDATE,
    LASTMODIFIEDDATE,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADMACHINE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#OnlineSales
file_path = f"@STG_ONLINESALES_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADONLINESALES_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTONLINESALES_RAW (
    ONLINESALESKEY,
    DATEKEY,
    STOREKEY,
    PRODUCTKEY,
    PROMOTIONKEY,
    CURRENCYKEY,
    CUSTOMERKEY,
    SALESORDERNUMBER,
    SALESORDERLINENUMBER,
    SALESQUANTITY,
    SALESAMOUNT,
    RETURNQUANTITY,
    RETURNAMOUNT,
    DISCOUNTQUANTITY,
    DISCOUNTAMOUNT,
    TOTALCOST,
    UNITCOST,
    UNITPRICE
)
SELECT 
    ONLINESALESKEY,
    DATEKEY,
    STOREKEY,
    PRODUCTKEY,
    PROMOTIONKEY,
    CURRENCYKEY,
    CUSTOMERKEY,
    SALESORDERNUMBER,
    SALESORDERLINENUMBER,
    SALESQUANTITY,
    SALESAMOUNT,
    RETURNQUANTITY,
    RETURNAMOUNT,
    DISCOUNTQUANTITY,
    DISCOUNTAMOUNT,
    TOTALCOST,
    UNITCOST,
    UNITPRICE
FROM LOADONLINESALES_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")

#Outage
file_path = f"@STG_OUTAGE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADOUTAGE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMOUTAGE_RAW (
    OUTAGEKEY,
    OUTAGELABEL,
    OUTAGENAME,
    OUTAGEDESCRIPTION,
    OUTAGETYPE,
    OUTAGETYPEDESCRIPTION,
    OUTAGESUBTYPE,
    OUTAGESUBTYPEDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    OUTAGEKEY,
    OUTAGELABEL,
    OUTAGENAME,
    OUTAGEDESCRIPTION,
    OUTAGETYPE,
    OUTAGETYPEDESCRIPTION,
    OUTAGESUBTYPE,
    OUTAGESUBTYPEDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADOUTAGE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Product
file_path = f"@STG_PRODUCT_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADPRODUCT_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMPRODUCT_RAW (
    PRODUCTKEY,
    PRODUCTLABEL,
    PRODUCTNAME,
    PRODUCTDESCRIPTION,
    PRODUCTSUBCATEGORYKEY,
    MANUFACTURER,
    BRANDNAME,
    CLASSID,
    CLASSNAME,
    STYLEID,
    STYLENAME,
    COLORID,
    COLORNAME,
    SIZE,
    SIZERANGE,
    SIZEUNITMEASUREID,
    WEIGHT,
    WEIGHTUNITMEASUREID,
    UNITOFMEASUREID,
    UNITOFMEASURENAME,
    STOCKTYPEID,
    STOCKTYPENAME,
    UNITCOST,
    UNITPRICE,
    AVAILABLEFORSALEDATE,
    STOPSALEDATE,
    STATUS,
    IMAGEURL,
    PRODUCTURL,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    PRODUCTKEY,
    PRODUCTLABEL,
    PRODUCTNAME,
    PRODUCTDESCRIPTION,
    PRODUCTSUBCATEGORYKEY,
    MANUFACTURER,
    BRANDNAME,
    CLASSID,
    CLASSNAME,
    STYLEID,
    STYLENAME,
    COLORID,
    COLORNAME,
    SIZE,
    SIZERANGE,
    SIZEUNITMEASUREID,
    WEIGHT,
    WEIGHTUNITMEASUREID,
    UNITOFMEASUREID,
    UNITOFMEASURENAME,
    STOCKTYPEID,
    STOCKTYPENAME,
    UNITCOST,
    UNITPRICE,
    AVAILABLEFORSALEDATE,
    STOPSALEDATE,
    STATUS,
    IMAGEURL,
    PRODUCTURL,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADPRODUCT_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#ProductCategory
file_path = f"@STG_PRODUCTCATEGORY_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADPRODUCTCATEGORY_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMPRODUCTCATEGORY_RAW (
    PRODUCTCATEGORYKEY,
    PRODUCTCATEGORYLABEL,
    PRODUCTCATEGORYNAME,
    PRODUCTCATEGORYDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    PRODUCTCATEGORYKEY,
    PRODUCTCATEGORYLABEL,
    PRODUCTCATEGORYNAME,
    PRODUCTCATEGORYDESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADPRODUCTCATEGORY_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#ProductSubCategory
file_path = f"@STG_PRODUCTSUBCATEGORY_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADPRODUCTSUBCATEGORY_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMPRODUCTSUBCATEGORY_RAW (
    PRODUCTSUBCATEGORYKEY,
    PRODUCTSUBCATEGORYLABEL,
    PRODUCTSUBCATEGORYNAME,
    PRODUCTSUBCATEGORYDESCRIPTION,
    PRODUCTCATEGORYKEY,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    PRODUCTSUBCATEGORYKEY,
    PRODUCTSUBCATEGORYLABEL,
    PRODUCTSUBCATEGORYNAME,
    PRODUCTSUBCATEGORYDESCRIPTION,
    PRODUCTCATEGORYKEY,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADPRODUCTSUBCATEGORY_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Promotion
file_path = f"@STG_PROMOTION_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADPROMOTION_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMPROMOTION_RAW (
    PROMOTIONKEY,
    PROMOTIONLABEL,
    PROMOTIONNAME,
    PROMOTIONDESCRIPTION,
    DISCOUNTPERCENT,
    PROMOTIONTYPE,
    PROMOTIONCATEGORY,
    STARTDATE,
    ENDDATE,
    MINQUANTITY,
    MAXQUANTITY,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    PROMOTIONKEY,
    PROMOTIONLABEL,
    PROMOTIONNAME,
    PROMOTIONDESCRIPTION,
    DISCOUNTPERCENT,
    PROMOTIONTYPE,
    PROMOTIONCATEGORY,
    STARTDATE,
    ENDDATE,
    MINQUANTITY,
    MAXQUANTITY,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADPROMOTION_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Sales
file_path = f"@STG_SALES_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADSALES_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTSALES_RAW (
    SALESKEY,
    DATEKEY,
    CHANNELKEY,
    STOREKEY,
    PRODUCTKEY,
    PROMOTIONKEY,
    CURRENCYKEY,
    UNITCOST,
    UNITPRICE,
    SALESQUANTITY,
    RETURNQUANTITY,
    RETURNAMOUNT,
    DISCOUNTQUANTITY,
    DISCOUNTAMOUNT,
    TOTALCOST,
    SALESAMOUNT
)
SELECT 
    SALESKEY,
    DATEKEY,
    CHANNELKEY,
    STOREKEY,
    PRODUCTKEY,
    PROMOTIONKEY,
    CURRENCYKEY,
    UNITCOST,
    UNITPRICE,
    SALESQUANTITY,
    RETURNQUANTITY,
    RETURNAMOUNT,
    DISCOUNTQUANTITY,
    DISCOUNTAMOUNT,
    TOTALCOST,
    SALESAMOUNT
FROM LOADSALES_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#SalesQuota
file_path = f"@STG_SALESQUOTA_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADSALESQUOTA_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTSALESQUOTA_RAW (
    SALESQUOTAKEY,
    CHANNELKEY,
    STOREKEY,
    PRODUCTKEY,
    DATEKEY,
    CURRENCYKEY,
    SCENARIOKEY,
    SALESQUANTITYQUOTA,
    SALESAMOUNTQUOTA,
    GROSSMARGINQUOTA
)
SELECT 
    SALESQUOTAKEY,
    CHANNELKEY,
    STOREKEY,
    PRODUCTKEY,
    DATEKEY,
    CURRENCYKEY,
    SCENARIOKEY,
    SALESQUANTITYQUOTA,
    SALESAMOUNTQUOTA,
    GROSSMARGINQUOTA
FROM LOADSALESQUOTA_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")

#SalesTerritory
file_path = f"@STG_SALESTERRITORY_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADSALESTERRITORY_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMSALESTERRITORY_RAW (
    SALESTERRITORYKEY,
    GEOGRAPHYKEY,
    SALESTERRITORYLABEL,
    SALESTERRITORYNAME,
    SALESTERRITORYREGION,
    SALESTERRITORYCOUNTRY,
    SALESTERRITORYGROUP,
    SALESTERRITORYLEVEL,
    SALESTERRITORYMANAGER,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    SALESTERRITORYKEY,
    GEOGRAPHYKEY,
    SALESTERRITORYLABEL,
    SALESTERRITORYNAME,
    SALESTERRITORYREGION,
    SALESTERRITORYCOUNTRY,
    SALESTERRITORYGROUP,
    SALESTERRITORYLEVEL,
    SALESTERRITORYMANAGER,
    STARTDATE,
    ENDDATE,
    STATUS,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADSALESTERRITORY_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Scenario
file_path = f"@STG_SCENARIO_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADSCENARIO_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMSCENARIO_RAW (
    SCENARIOKEY,
    SCENARIOLABEL,
    SCENARIONAME,
    SCENARIODESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    SCENARIOKEY,
    SCENARIOLABEL,
    SCENARIONAME,
    SCENARIODESCRIPTION,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADSCENARIO_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")
    
#Store
file_path = f"@STG_STORE_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADSTORE_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO DIMSTORE_RAW (
    STOREKEY,
    GEOGRAPHYKEY,
    STOREMANAGER,
    STORETYPE,
    STORENAME,
    STOREDESCRIPTION,
    STATUS,
    OPENDATE,
    CLOSEDATE,
    ENTITYKEY,
    ZIPCODE,
    ZIPCODEEXTENSION,
    STOREPHONE,
    STOREFAX,
    ADDRESSLINE1,
    ADDRESSLINE2,
    CLOSEREASON,
    EMPLOYEECOUNT,
    SELLINGAREASIZE,
    LASTREMODELDATE,
    GEOLOCATION,
    GEOMETRY,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
)
SELECT 
    STOREKEY,
    GEOGRAPHYKEY,
    STOREMANAGER,
    STORETYPE,
    STORENAME,
    STOREDESCRIPTION,
    STATUS,
    OPENDATE,
    CLOSEDATE,
    ENTITYKEY,
    ZIPCODE,
    ZIPCODEEXTENSION,
    STOREPHONE,
    STOREFAX,
    ADDRESSLINE1,
    ADDRESSLINE2,
    CLOSEREASON,
    EMPLOYEECOUNT,
    SELLINGAREASIZE,
    LASTREMODELDATE,
    GEOLOCATION,
    GEOMETRY,
    ETLLOADID,
    LOADDATE,
    UPDATEDATE
FROM LOADSTORE_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")

#StrategyPlan
file_path = f"@STG_STRATEGYPLAN_DEV/{file_name}"

cursor.execute(f"LIST {file_path};")
file_list = cursor.fetchall()

cursor.execute(f"""
COPY INTO LOADSTRATEGYPLAN_STAGE
FROM {file_path}
FILE_FORMAT = (
    TYPE='CSV'
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    SKIP_HEADER=1
)
ON_ERROR = 'CONTINUE';
""")
print("""Legend: (file, status, rows_parsed, rows_loaded, 
    error_limit, errors_seen, first_error_details)""")
cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
copy_results = cursor.fetchall()

for row in copy_results:
    print(f"COPY INTO Result: {row}")

cursor.execute("""
INSERT INTO FACTSTRATEGYPLAN_RAW (
    STRATEGYPLANKEY,
    DATEKEY,
    ENTITYKEY,
    SCENARIOKEY,
    ACCOUNTKEY,
    CURRENCYKEY,
    PRODUCTCATEGORYKEY,
    AMOUNT
)
SELECT 
    STRATEGYPLANKEY,
    DATEKEY,
    ENTITYKEY,
    SCENARIOKEY,
    ACCOUNTKEY,
    CURRENCYKEY,
    PRODUCTCATEGORYKEY,
    AMOUNT
FROM LOADSTRATEGYPLAN_STAGE;
""")

cursor.execute("SELECT * FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));")
insert_results = cursor.fetchall()

print()
print('Legend: (Number of inserted records)')
for row in insert_results:
    print(f"INSERT Result: {row}")    

cursor.close()
conn.close()
